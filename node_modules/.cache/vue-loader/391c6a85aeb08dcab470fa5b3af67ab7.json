{"remainingRequest":"/Users/nsi/WebstormProjects/yumaspos-2021/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/nsi/WebstormProjects/yumaspos-2021/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/nsi/WebstormProjects/yumaspos-2021/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nsi/WebstormProjects/yumaspos-2021/src/App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"/Users/nsi/WebstormProjects/yumaspos-2021/src/App.vue","mtime":1702601242702},{"path":"/Users/nsi/WebstormProjects/yumaspos-2021/node_modules/cache-loader/dist/cjs.js","mtime":1687177353478},{"path":"/Users/nsi/WebstormProjects/yumaspos-2021/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1687182380623},{"path":"/Users/nsi/WebstormProjects/yumaspos-2021/node_modules/cache-loader/dist/cjs.js","mtime":1687177353478},{"path":"/Users/nsi/WebstormProjects/yumaspos-2021/node_modules/vue-loader/lib/index.js","mtime":1687182380623}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}